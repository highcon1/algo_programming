PROCEDURE dot_product(VAR v1, v2: ARRAY OF REAL; n: INTEGER; VAR ps: REAL)
VAR
    i: INTEGER;
BEGIN
    ps := 0;
    FOR i := 0 TO n-1 DO
        ps := ps + (v1[i] * v2[i]);
    END_FOR
END

ALGORITHM CheckOrthogonal
FUNCTION dot_product_func(VAR v1, v2: ARRAY OF REAL; n: INTEGER): REAL
VAR
    i: INTEGER;
    ps: REAL;
BEGIN
    ps := 0;
    FOR i := 0 TO n-1 DO
        ps := ps + (v1[i] * v2[i]);
    END_FOR
    RETURN ps;
END

ALGORITHM CheckOrthogonalFunc (Modified using dot_function instead of procedure)
VAR
    n: INTEGER;
    dim: INTEGER;
    i, j, k: INTEGER;
    v1, v2: ARRAY[0..99] OF REAL;
    result: REAL;
BEGIN
    Write("Enter number of vector pairs: ");
    Read(n);
    Write("Enter dimension of vectors: ");
    Read(dim);
    
    FOR k := 1 TO n DO
        // Read vectors
        Write("Enter vector 1 of pair ", k, ": ");
        FOR i := 0 TO dim-1 DO
            Read(v1[i]);
        END_FOR
        
        Write("Enter vector 2 of pair ", k, ": ");
        FOR i := 0 TO dim-1 DO
            Read(v2[i]);
        END_FOR
        
        // Calculate dot product using function
        result := dot_product_func(v1, v2, dim);
        
        // Check orthogonality
        IF result = 0 THEN
            Write("Vectors are orthogonal");
        ELSE
            Write("Vectors are not orthogonal");
        END_IF
    END_FOR
END